// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using scrubsAPI;

#nullable disable

namespace scrubsAPI.Migrations
{
    [DbContext(typeof(ScrubsDbContext))]
    partial class ScrubsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("scrubsAPI.Consultation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("inspectionid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("specialityid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("inspectionid");

                    b.HasIndex("specialityid");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("scrubsAPI.Doctor", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("gender")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("specialityid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("specialityid");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("scrubsAPI.Inspection", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("anamesis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("complaints")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("conclusion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deathTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("doctorid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("nextVisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("notified")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("previousInspectionid")
                        .HasColumnType("uuid");

                    b.Property<string>("treatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.HasIndex("patientid");

                    b.HasIndex("previousInspectionid");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("scrubsAPI.Models.Comment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("authorid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("consultationid")
                        .HasColumnType("uuid");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("modifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("parentCommentid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("authorid");

                    b.HasIndex("consultationid");

                    b.HasIndex("parentCommentid");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("scrubsAPI.Models.Diagnosis", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("icdDiagnosisid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("inspectionid")
                        .HasColumnType("uuid");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("icdDiagnosisid");

                    b.HasIndex("inspectionid");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("scrubsAPI.Models.Icd10", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("idFromJson")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("parentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("parentIdFromJson")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("parentId");

                    b.ToTable("Icd10s");
                });

            modelBuilder.Entity("scrubsAPI.Patient", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("birthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("creationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("gender")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("scrubsAPI.Speciality", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("creationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("scrubsAPI.Consultation", b =>
                {
                    b.HasOne("scrubsAPI.Inspection", "inspection")
                        .WithMany()
                        .HasForeignKey("inspectionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("scrubsAPI.Speciality", "speciality")
                        .WithMany()
                        .HasForeignKey("specialityid");

                    b.Navigation("inspection");

                    b.Navigation("speciality");
                });

            modelBuilder.Entity("scrubsAPI.Doctor", b =>
                {
                    b.HasOne("scrubsAPI.Speciality", "speciality")
                        .WithMany()
                        .HasForeignKey("specialityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("speciality");
                });

            modelBuilder.Entity("scrubsAPI.Inspection", b =>
                {
                    b.HasOne("scrubsAPI.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("scrubsAPI.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("scrubsAPI.Inspection", "previousInspection")
                        .WithMany()
                        .HasForeignKey("previousInspectionid");

                    b.Navigation("doctor");

                    b.Navigation("patient");

                    b.Navigation("previousInspection");
                });

            modelBuilder.Entity("scrubsAPI.Models.Comment", b =>
                {
                    b.HasOne("scrubsAPI.Doctor", "author")
                        .WithMany()
                        .HasForeignKey("authorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("scrubsAPI.Consultation", "consultation")
                        .WithMany()
                        .HasForeignKey("consultationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("scrubsAPI.Models.Comment", "parentComment")
                        .WithMany()
                        .HasForeignKey("parentCommentid");

                    b.Navigation("author");

                    b.Navigation("consultation");

                    b.Navigation("parentComment");
                });

            modelBuilder.Entity("scrubsAPI.Models.Diagnosis", b =>
                {
                    b.HasOne("scrubsAPI.Models.Icd10", "icdDiagnosis")
                        .WithMany()
                        .HasForeignKey("icdDiagnosisid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("scrubsAPI.Inspection", "inspection")
                        .WithMany()
                        .HasForeignKey("inspectionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("icdDiagnosis");

                    b.Navigation("inspection");
                });

            modelBuilder.Entity("scrubsAPI.Models.Icd10", b =>
                {
                    b.HasOne("scrubsAPI.Models.Icd10", "parent")
                        .WithMany()
                        .HasForeignKey("parentId");

                    b.Navigation("parent");
                });
#pragma warning restore 612, 618
        }
    }
}
